package basic_training;
 
public class Day06_5 {
    public int[] solution(int[] arr, int[][] queries) {
        // queries == [[ , , ], [ , , ], [ , , ]] // queries[i] == [ s, e, k ]
        int[] answer = new int[queries.length];
        int idx=0;
        for(int[] arr2 : queries) {
            int s = arr2[0];
            int e = arr2[1];
            int k = arr2[2];
            
            int min = Integer.MAX_VALUE;
            for(int i=s; i<=e; i++) { 
                if(arr[i] > k && min > arr[i]) min = arr[i]; 
            }
            answer[idx] = min == Integer.MAX_VALUE ? -1 : min;  
            idx
        }
        return answer;
    }

}

// 이번 문제는 개인적으로 너무 어려웠다 
// 거의 근접해서 풀었다고 생각했는데도 테스트 통과를 못해서, 풀이를 찾아봤는데도 이해가 되지 않았었다.
// if(arr[i] > k && min > arr[i]) 이 조건문일때, min = arr[i] 을 대입하고 answer 배열에 min 을 추가, 조건문의 else 일때 answer 배열에 -1 을 추가했던게 실패의 이유였다. 
// min 값을 구하는 것과 answer 배열에 요소 추가는 분리했어야 한다. 이하 설명

// 테스트에 통과한 부분은 for(int i=s; i<=e; i++) 의 역할과 answer 배열에 요소를 추가하는 역할을 분리한 것이었다!
// 예) arr = [0,1,2,4,3] , queries[0] == [0,4,2] 일때  s=0, e=4, k=2
// for(int i=0, i<=4, i++) -> i = 0, 1, 2, 3, 4 가 된다.
// arr[i] 는 arr[0], arr[1], arr[2], arr[3], arr[4] 대입이 되고
// arr[i] 가 k=2 보다 큰 값은 arr[3]의 값 4 와, arr[4]의 3 이다.
// arr[i] 가 k 보다 클때, 가장작은 값을 구해야 하는데, 작은값 min 을 최대값으로 하고 arr[i] 가 k 보다 큰 조건을 만족하는 min > arr[3] 하면 당연히 min 은 arr[3] 보다 크므로, min = arr[3] 을 대입시킨다.
// 그다음 arr[i] 가 arr[4] 일때 min > arr[4] 하면 (이때 min 은 arr[3] 이다.) arr[3] 값 4 가 arr[4] 3 보다 크므로 다시 최소값 min = arr[4] 로 대입시킨다.
// 여기까지 for(int i=s; i<=e; i++) 의 역할로, for 문에서 조건 arr[i] 가 k 보다 클때, 가장작은 값 min 을 구하는 것이다!(조건에 맞는 min 값)(포인트!)

// 이후 answer 이라는 배열에 조건에 맞는 min 값을 담는데,
// 이때 여전히 min == Integer.MAX_VALUE 라는 것은 조건(arr[i] 가 k 보다 클때, 가장작은 값)이 맞지 않았다는 뜻으로 -1 을 담고 아닌 경우는 조건에 맞는 min 을 대입시킨다.
// idx 를 queries 배열의 요소 반복문 안에서 증가시켰으므로 queries 배열의 요소 index 와 동일하다.

